72c72
< /* Set on the child in forkserver mode: */
---
> /* Set in the child process in forkserver mode: */
75,81c75
< 
< 
< /* the id for multiple CBs*/
< static int cb_id = -1;
< 
< /*current TSL_FD for the specific CB*/
< static int cur_tsl_fd;
---
> unsigned int afl_forksrv_pid;
117c111
<   //fprintf(stderr, "[&]afl_setup\n");
---
> 
119c113
<   char *inst_r = getenv("AFL_INST_RATIO");
---
>        *inst_r = getenv("AFL_INST_RATIO");
121c115
<   int shm_id = -1;
---
>   int shm_id;
123,124d116
<   //** if ((read(FORKSRV_FD, &cb_id, 4) != 4) || (read(FORKSRV_FD, &shm_id, 4) != 4))
<   //**   return;
138,141d129
<   // if(cb_id != -1)
<   // {
<   //   cur_tsl_fd = TSL_FD - cb_id;
<   // }else exit(1);
145,146d132
<   // if(shm_id != -1)
<   // {
151c137,140
<     if (inst_r) afl_area_ptr[0] = 1
---
>     /* With AFL_INST_RATIO set to a low value, we want to touch the bitmap
>        so that the parent doesn't give up on us. */
> 
>     if (inst_r) afl_area_ptr[0] = 1;
153c142,143
<   }else exit(1);
---
> 
>   }
161c151
<   //fprintf(stderr, "[&]afl_start_code: 0x%x | afl_end_code: 0x%x\n", afl_start_code, afl_end_code);
---
> 
168c158
<   //fprintf(stderr, "[%]afl_forkserver\n");
---
> 
177a168,169
>   afl_forksrv_pid = getpid();
> 
180d171
<   //fprintf(stderr, "[%]#0\n");
188c179
<     if (read(FORKSRV_FD, tmp, 4) != 4) exit(2); //forked exec start to run 
---
>     if (read(FORKSRV_FD, tmp, 4) != 4) exit(2);
194d184
<     // if (pipe(t_fd) || dup2(t_fd[1], cur_tsl_fd) < 0) exit(3);
215d204
<     // close(cur_tsl_fd);
220c209
<     //fprintf(stderr, "[%]#1\n");
---
> 
224,225c213,214
<     //fprintf(stderr, "[%]#1\n");
<     if (waitpid(child_pid, &status, WUNTRACED) < 0) exit(6);
---
> 
>     if (waitpid(child_pid, &status, 0) < 0) exit(6);
273c262
<   // fprintf(stderr, "[#]afl_request_tsl(pc=0x%x, cb=0x%x, )\n", pc, cb);
---
> 
275c264
<   // fprintf(stderr, "[#]fork_child\n");
---
> 
279,281c268,269
<   // fprintf(stderr, "[#]->write(cur_tsl_fd=%d,,)\n", cur_tsl_fd);
<   // if (write(TSL_FD, &t, sizeof(struct afl_tsl)) != sizeof(struct afl_tsl))
<   if (write(cur_tsl_fd, &t, sizeof(struct afl_tsl)) != sizeof(struct afl_tsl))
---
> 
>   if (write(TSL_FD, &t, sizeof(struct afl_tsl)) != sizeof(struct afl_tsl))
283c271
<   // fprintf(stderr, "[#]end-\n");
---
> 
293c281
<   // fprintf(stderr, "[*]afl_wait_tsl()\n");
---
> 
295c283
<     // fprintf(stderr, "[*]while starts\n");
---
> 
300,306c288,290
<     // fprintf(stderr, "[*]t.pc: 0x%x | t.cs_base: 0x%x\n", t.pc, t.cs_base);
<     //do not cache for dynamically generated code
<     if((t.pc >= afl_start_code) && (t.pc <= afl_end_code))
<       tb_find_slow(env, t.pc, t.cs_base, t.flags);
<     // else
<       // fprintf(stderr, "[*]no cache for JIT code\n");
<     // fprintf(stderr, "[*]while ends--\n");
---
> 
>     tb_find_slow(env, t.pc, t.cs_base, t.flags);
> 
310c294
<   // fprintf(stderr, "[*]ret\n");
---
> 
